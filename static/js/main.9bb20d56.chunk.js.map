{"version":3,"sources":["lib/sort.js","lib/index.js","components/item.jsx","components/toolbar.jsx","App.js","components/restaurant.jsx","serviceWorker.js","index.js"],"names":["SORT","a","b","RAW_VALUES","sortingValues","bestMatch","newest","ratingAverage","distance","popularity","averageProductPrice","console","log","deliveryCosts","minCost","topRestaurants","regX","RegExp","getSortValue","id","sortName","result","REVERSE_SORT_MAPPING","Number","isNaN","toLocaleString","undefined","maximumFractionDigits","test","SORT_MAPPING","restaurants","map","val","App","currentSort","value","isFavorite","favorites","open","orderAhead","closed","this","parseRestaurants","Object","is","__triggerSort","name","tokens","toLowerCase","split","reduce","accum","index","source","length","push","sort","reverse","unsorted","sorted","getBestMatchSort","getNewestSort","getRatingAverageSort","getDistanceSort","getPopularitySort","getAverageProductPriceSort","getMinimumCostSort","getDeliveryCostSort","getTopRestaurantsSort","Error","list","props","i","__parse","status","getBadge","className","Item","sortValue","makeFavorite","SortContext","Consumer","state","src","process","alt","onClick","Toolbar","triggerSearch","triggerSort","Search","callback","timeout","timeID","context","clearTimeout","setTimeout","apply","arguments","createDebouncer","type","onChange","ev","target","trim","placeholder","React","createContext","Restaurant","app","newRests","setSortType","setState","Provider","query","search","key","isFav","updated","updateFavorite","Component","Boolean","window","location","hostname","match","ReactDOM","render","PlacementType","TransitionState","transitionDuration","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wjIAiBaA,EACE,SAACC,EAAGC,GACX,OAAOC,EAAWF,GAAGG,cAAcC,UAAYF,EAAWD,GAAGE,cAAcC,WAFtEL,EAID,SAACC,EAAGC,GACR,OAAOC,EAAWF,GAAGG,cAAcE,OAASH,EAAWD,GAAGE,cAAcE,QALnEN,EAOM,SAACC,EAAGC,GACf,OAAOC,EAAWF,GAAGG,cAAcG,cAAgBJ,EAAWD,GAAGE,cAAcG,eAR1EP,EAUC,SAACC,EAAGC,GACV,OAAOC,EAAWF,GAAGG,cAAcI,SAAWL,EAAWD,GAAGE,cAAcI,UAXrER,EAaG,SAACC,EAAGC,GACZ,OAAOC,EAAWF,GAAGG,cAAcK,WAAaN,EAAWD,GAAGE,cAAcK,YAdvET,EAgBY,SAACC,EAAGC,GACrB,OAAOC,EAAWF,GAAGG,cAAcM,oBAAsBP,EAAWD,GAAGE,cAAcM,qBAjBhFV,EAmBK,SAACC,EAAGC,GAEd,OADAS,QAAQC,IAAIX,EAAGC,EAAGC,EAAWF,GAAGG,cAAcS,cAAgBV,EAAWD,GAAGE,cAAcS,eACnFV,EAAWF,GAAGG,cAAcS,cAAgBV,EAAWD,GAAGE,cAAcS,eArB1Eb,EAwBI,SAACC,EAAGC,GACb,OAAOC,EAAWF,GAAGG,cAAcU,QAAUX,EAAWD,GAAGE,cAAcU,SAzBpEd,EA2BO,SAACC,EAAGC,GAChB,OAAOC,EAAWF,GAAGG,cAAcW,eAAiBZ,EAAWD,GAAGE,cAAcW,gBAIlFC,EAAO,IAAIC,OAAO,mBAAoB,KAUrC,SAASC,EAAaC,EAAIC,GAC7B,IAAIC,EAASlB,EAAWgB,GAAIf,cAAckB,EAAqBF,IAe/D,OAVIC,GADCE,OAAOC,MAAMH,IAAYA,EAAS,IAAS,EACtC,WAAOA,EAAS,KAAMI,oBAAeC,EAAW,CAAEC,sBAAuB,IAAzE,KAEGN,EAAOI,oBAAeC,EAAW,CAAEC,sBAAuB,IAInEX,EAAKY,KAAKR,KACVC,EAAM,gBAAYA,IAGfA,EAIJ,IAAMQ,EAAe,CACxBxB,UAAW,aACXC,OAAQ,SACRC,cAAe,cACfC,SAAU,WACVC,WAAY,aACZC,oBAAqB,qBACrBG,cAAe,gBACfC,QAAS,eACTC,eAAgB,mBAGdO,EAAuB,CACzB,aAAc,YACd,OAAU,SACV,cAAe,gBACf,SAAY,WACZ,WAAc,aACd,qBAAsB,sBACtB,gBAAiB,gBACjB,eAAgB,UAChB,kBAAmB,kBC1FZnB,EAAa2B,IAAYC,IAAI,SAAAC,GAEpC,OADAA,EAAI5B,cAAcW,eAAmBiB,EAAI5B,cAAcI,SAAWwB,EAAI5B,cAAcK,WAAcuB,EAAI5B,cAAcG,cAC7GyB,KACL,GAKOC,EAAb,iDAEIC,YAAcL,EAAaxB,UAF/B,2DAUmBc,EAAIgB,EAAML,GAErB,GAAI3B,EAAWgB,GAAIiB,aAAeD,EAAO,OAAO,EAChDhC,EAAWgB,GAAIiB,WAAaD,EAHM,IAI5BE,EAAwCP,EAAxCO,UAAWC,EAA6BR,EAA7BQ,KAAMC,EAAuBT,EAAvBS,WAAYC,EAAWV,EAAXU,OACnC,OAAOC,KAAKC,iBAAL,sBAA0BL,GAA1B,YAAwCC,GAAxC,YAAiDC,GAAjD,YAAgEC,OAf/E,kCAwBgBpB,EAAUU,GAClB,OAAIW,KAAKP,cAAgBd,IAAYuB,OAAOC,GAAGxB,EAAU,MACzDqB,KAAKP,YAAcd,EACZqB,KAAKI,cAAcf,EAAaW,KAAKP,gBA3BpD,+BAuCuB,IAAZY,EAAW,uDAAJ,GACNC,EAASD,EAAKE,cAAcC,MAAM,KAAKC,OAAO,SAACC,EAAOnB,EAAKoB,EAAOC,GAKlE,OAJAF,GAAa,YAAQnB,GAChBoB,EAAQ,IAAOC,EAAOC,SACvBH,GAAa,MAEVA,GACR,IAECnC,EAAO,IAAIC,OAAJ,WAAe8B,EAAf,MACX,OAAON,KAAKC,iBAAiBvC,EAAW+C,OAAO,SAACC,EAAOnB,EAAKoB,GACxD,OAAKpC,EAAKY,KAAKI,EAAIc,KAAKE,gBACxBG,EAAMI,KAAKH,GACJD,GAFwCA,GAGhD,OArDX,0CA8D+D,IAAxCd,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAM5C,MAAO,CAAEH,UALTA,EAAYA,EAAUmB,KAAKxD,GAAgByD,UAKvBnB,KAJpBA,EAAOA,EAAKkB,KAAKxD,GAAgByD,UAIPlB,WAH1BA,EAAaA,EAAWiB,KAAKxD,GAAgByD,UAGPjB,OAFtCA,EAASA,EAAOgB,KAAKxD,GAAgByD,aAlE7C,uCAuE4D,IAAxCpB,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAMzC,MAAO,CAAEH,UALTA,EAAYA,EAAUmB,KAAKxD,GAAayD,UAKpBnB,KAJpBA,EAAOA,EAAKkB,KAAKxD,GAAayD,UAIJlB,WAH1BA,EAAaA,EAAWiB,KAAKxD,GAAayD,UAGJjB,OAFtCA,EAASA,EAAOgB,KAAKxD,GAAayD,aA3E1C,8CAgFmE,IAAxCpB,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAMhD,MAAO,CAAEH,UALTA,EAAYA,EAAUmB,KAAKxD,GAAoByD,UAK3BnB,KAJpBA,EAAOA,EAAKkB,KAAKxD,GAAoByD,UAIXlB,WAH1BA,EAAaA,EAAWiB,KAAKxD,GAAoByD,UAGXjB,OAFtCA,EAASA,EAAOgB,KAAKxD,GAAoByD,aApFjD,yCAyF8D,IAAxCpB,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAM3C,MAAO,CAAEH,UALTA,EAAYA,EAAUmB,KAAKxD,GAKPsC,KAJpBA,EAAOA,EAAKkB,KAAKxD,GAISuC,WAH1BA,EAAaA,EAAWiB,KAAKxD,GAGSwC,OAFtCA,EAASA,EAAOgB,KAAKxD,MA7F7B,2CAkGgE,IAAxCqC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAM7C,MAAO,CAAEH,UALTA,EAAYA,EAAUmB,KAAKxD,GAAiByD,UAKxBnB,KAJpBA,EAAOA,EAAKkB,KAAKxD,GAAiByD,UAIRlB,WAH1BA,EAAaA,EAAWiB,KAAKxD,GAAiByD,UAGRjB,OAFtCA,EAASA,EAAOgB,KAAKxD,GAAiByD,aAtG9C,oDA2GyE,IAAxCpB,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAMtD,MAAO,CAAEH,UALTA,EAAYA,EAAUmB,KAAKxD,GAKPsC,KAJpBA,EAAOA,EAAKkB,KAAKxD,GAISuC,WAH1BA,EAAaA,EAAWiB,KAAKxD,GAGSwC,OAFtCA,EAASA,EAAOgB,KAAKxD,MA/G7B,6CAoHkE,IAAxCqC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAO/C,OANAH,EAAYA,EAAUmB,KAAKxD,GAC3BsC,EAAOA,EAAKkB,KAAKxD,GACjBuC,EAAaA,EAAWiB,KAAKxD,GAC7BwC,EAASA,EAAOgB,KAAKxD,GACrBW,QAAQC,IAAIyB,EAAUC,GAEf,CAAED,YAAWC,OAAMC,aAAYC,YA3H9C,4CA8HiE,IAAxCH,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAM9C,MAAO,CAAEH,UALTA,EAAYA,EAAUmB,KAAKxD,GAKPsC,KAJpBA,EAAOA,EAAKkB,KAAKxD,GAISuC,WAH1BA,EAAaA,EAAWiB,KAAKxD,GAGSwC,OAFtCA,EAASA,EAAOgB,KAAKxD,MAlI7B,+CAuIoE,IAAxCqC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAMjD,MAAO,CAAEH,UALTA,EAAYA,EAAUmB,KAAKxD,GAAqByD,UAK5BnB,KAJpBA,EAAOA,EAAKkB,KAAKxD,GAAqByD,UAIZlB,WAH1BA,EAAaA,EAAWiB,KAAKxD,GAAqByD,UAGZjB,OAFtCA,EAASA,EAAOgB,KAAKxD,GAAqByD,aA3IlD,oCAwJkBC,EAAUtC,GACpB,IAAIuC,EACJ,OAAQvC,GACJ,KAAKS,EAAaxB,UACdsD,EAASlB,KAAKmB,iBAAiBF,GAC/B,MACJ,KAAK7B,EAAavB,OACdqD,EAASlB,KAAKoB,cAAcH,GAC5B,MACJ,KAAK7B,EAAatB,cACdoD,EAASlB,KAAKqB,qBAAqBJ,GACnC,MACJ,KAAK7B,EAAarB,SACdmD,EAASlB,KAAKsB,gBAAgBL,GAC9B,MACJ,KAAK7B,EAAapB,WACdkD,EAASlB,KAAKuB,kBAAkBN,GAChC,MACJ,KAAK7B,EAAanB,oBACdiD,EAASlB,KAAKwB,2BAA2BP,GACzC,MACJ,KAAK7B,EAAaf,QACd6C,EAASlB,KAAKyB,mBAAmBR,GACjC,MACJ,KAAK7B,EAAahB,cACd8C,EAASlB,KAAK0B,oBAAoBT,GAClC,MACJ,KAAK7B,EAAad,eACd4C,EAASlB,KAAK2B,sBAAsBV,GACpC,MACJ,QACI,MAAM,IAAIW,MAAJ,yBAA4BjD,EAA5B,6BAEd,OAAOuC,IAzLf,uCAmMqBW,GACb,IAAIxC,EAAc,CACdO,UAAW,GACXC,KAAM,GACNC,WAAY,GACZC,OAAQ,IAER+B,EAAQpE,EAEZ,GAAImE,EAAM,CAAC,IAAD,uBACN,YAAcA,EAAd,+CAAoB,CAAC,IAAZE,EAAW,QAChB/B,KAAKgC,QAAQ3C,EAAayC,EAAOC,IAF/B,wFAKN,IAAK,IAAIA,EAAI,EAAGA,EAAID,EAAMjB,OAAQkB,IAC9B/B,KAAKgC,QAAQ3C,EAAayC,EAAOC,GAGzC,OAAO/B,KAAKI,cAAcf,EAAaW,KAAKP,eArNpD,8BA4NYJ,EAAayC,EAAOC,GACxB,GAAID,EAAMC,GAAGpC,WACTN,EAAYO,UAAUkB,KAAKiB,QAE3B,OAAQD,EAAMC,GAAGE,QACb,IAAK,OACD5C,EAAYQ,KAAKiB,KAAKiB,GACtB,MACJ,IAAK,cACD1C,EAAYS,WAAWgB,KAAKiB,GAC5B,MACJ,IAAK,SACD1C,EAAYU,OAAOe,KAAKiB,GACxB,MACJ,QACI,MAAM,IAAIH,MAAM,4CA3OpC,K,OCZIM,EAAW,SAACD,GACZ,OAAQA,GACJ,IAAK,OACD,OACI,0BAAME,UAAU,mBACZ,0BAAMA,UAAU,eAAc,kBAAC,IAAD,OAC9B,0BAAMA,UAAU,kBAAkBF,IAE9C,IAAK,SACD,OACI,0BAAME,UAAU,mBACZ,0BAAMA,UAAU,eAAc,kBAAC,IAAD,OAC9B,0BAAMA,UAAU,kBAAkBF,IAE9C,IAAK,cACD,OACI,0BAAME,UAAU,mBACZ,0BAAMA,UAAU,eAAc,kBAAC,IAAD,OAC9B,0BAAMA,UAAU,eAAeF,IAE3C,QACI,MAAM,IAAIL,MAAM,kCAIrB,SAASQ,EAAT,GAA0E,IAA1D/B,EAAyD,EAAzDA,KAAM4B,EAAmD,EAAnDA,OAAQtC,EAA2C,EAA3CA,WAAY0C,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,aAAc5D,EAAM,EAANA,GAEtE,OACI,kBAAC6D,EAAYC,SAAb,KAAuB,SAAAC,GAAK,OACxB,yBAAKN,UAAU,8BACX,yBAAKA,UAAU,eACX,4BAAQA,UAAU,+BACd,yBAAKO,IAAKC,YAAA,mBAAsCjE,EAAK,EAAK,EAAhD,QAAyDkE,IAAKvC,MAGhF,yBAAK8B,UAAU,gBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,wCACX,0BAAMA,UAAU,0CACc,gBAAzBF,EAAO1B,cAAkC,+BAAzC,iBAAoF0B,EAApF,MAEL,uBAAGE,UAAU,iBAAiBD,EAASD,MAG/C,yBAAKE,UAAU,WACX,uBAAGA,UAAU,kDAAkD9B,GAC/D,uBAAG8B,UAAU,oDAAb,4HAKR,4BAAQA,UAAU,eACd,0BAAMA,UAAU,8CAA8CU,QAAS,WACnEP,GAAc3C,KAEbA,EACG,kBAAC,IAAD,CAASwC,UAAU,eAEnB,kBAAC,IAAD,CAAYA,UAAU,mBAE9B,0BAAMA,UAAU,oBACZ,yBAAKA,UAAU,SACX,yBAAKA,UAAU,gCACX,6BACI,uBAAGA,UAAU,YAAYM,EAAMhD,aAC/B,uBAAG0C,UAAU,SAASE,GAAa,WClExD,SAASS,EAAT,GAAkD,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,YAC7C,OACI,6BAASb,UAAU,qDACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,sBAAd,kBACA,wBAAIA,UAAU,YAAd,mDAKR,yBAAKA,UAAU,aAEX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,kEACX,kBAACc,EAAD,CAAQF,cAAeA,EAAeC,YAAaA,QAQ3E,SAASC,EAAT,GAAiD,IAA/BF,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,YAEzBE,ECdD,SAAyBA,GAA0B,IAAhBC,EAAe,uDAAL,IAC5CC,OAASnE,EACToE,EAAUrD,KAEd,OAAO,WAAsB,IAAD,YACxBsD,aAAaF,GACbA,EAASG,WAAW,kBAAML,EAASM,MAAMH,EAASI,IAAYN,IDQnDO,CAAgB,SAACnE,GAC5BwD,EAAcxD,IACf,KAEH,OACI,yBAAK4C,UAAU,gCACX,yBAAKA,UAAU,0CACX,2BAAOA,UAAU,mBAAmBwB,KAAK,OAAOC,SAAU,SAAAC,GAAQX,EAASW,EAAGC,OAAOpE,MAAMqE,SAAWC,YAAY,6BAClH,kBAAC,IAAD,CAAU7B,UAAU,4BAExB,yBAAKA,UAAU,4BACX,4BAAQA,UAAU,6DAA6DwB,KAAK,OAAOC,SAAU,SAAAC,GAAE,OAAIb,EAAYa,EAAGC,OAAOpE,SAC7H,4BAAQA,MAAON,EAAaxB,WAAYwB,EAAaxB,WACrD,4BAAQ8B,MAAON,EAAahB,eAAgBgB,EAAahB,eACzD,4BAAQsB,MAAON,EAAarB,UAAWqB,EAAarB,UACpD,4BAAQ2B,MAAON,EAAaf,SAAUe,EAAaf,SACnD,4BAAQqB,MAAON,EAAavB,QAASuB,EAAavB,QAClD,4BAAQ6B,MAAON,EAAapB,YAAaoB,EAAapB,YACtD,4BAAQ0B,MAAON,EAAatB,eAAgBsB,EAAatB,eACzD,4BAAQ4B,MAAON,EAAanB,qBAAsBmB,EAAanB,qBAC/D,4BAAQyB,MAAON,EAAad,gBAAiBc,EAAad,iBAE9D,kBAAC,IAAD,CAAQ6D,UAAU,8BE3C3B,IAAMI,EAAc0B,IAAMC,cAAc,MAE1BC,E,YAajB,aAAe,IAAD,8BACV,+CAbJC,IAAM,IAAI5E,EAYI,EAVdiD,MAAQ,CACJpD,YAAa,CACTO,UAAW,GACXC,KAAM,GACNC,WAAY,GACZC,OAAQ,IAEZN,YAAa,EAAK2E,IAAI3E,aAKtB,EAAKgD,MAAMpD,YAAc,EAAK+E,IAAInE,mBAFxB,E,yEAMFtB,GACR,IAAI0F,EAAWrE,KAAKoE,IAAIE,YAAY3F,EAAUqB,KAAKyC,MAAMpD,aACrDgF,GACArE,KAAKuE,SAAS,CAAE9E,YAAad,EAAUU,YAAagF,M,+BAIlD,IAAD,OACChF,EAAgBW,KAAKyC,MAArBpD,YAEN,OACI,kBAACkD,EAAYiC,SAAb,CAAsB9E,MAAOM,KAAKyC,OAC9B,0BAAMN,UAAU,oCACZ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,YACX,kBAACW,EAAD,CAASC,cAAe,SAAA0B,GACpB,EAAKF,SAAS,CAAElF,YAAa,EAAK+E,IAAIM,OAAOD,MAE7CzB,YAAa,SAACzD,GAAD,OAAS,EAAK+E,YAAY/E,MAC3C,yBAAK4C,UAAU,WACX,yBAAKA,UAAU,6CACV9C,EAAYO,UAAUN,IAAI,SAACZ,GAAD,OACvB,yBAAKiG,IAAKjH,EAAWgB,GAAI2B,KAAM8B,UAAU,wCACrC,kBAACC,EAAD,CAAM1D,GAAIA,EAAI2B,KAAM3C,EAAWgB,GAAI2B,KAC/B4B,OAAQvE,EAAWgB,GAAIuD,OAAQtC,WAAYjC,EAAWgB,GAAIiB,WAC1D0C,UAAW5D,EAAaC,EAAI,EAAK0F,IAAI3E,aACrC6C,aAAc,SAACsC,GACX,IAAIC,EAAU,EAAKT,IAAIU,eAAepG,EAAIkG,EAAOvF,GAC7CwF,GACA,EAAKN,SAAS,CAAElF,YAAawF,UAKhDxF,EAAYQ,KAAKP,IAAI,SAACZ,GAAD,OAClB,yBAAKiG,IAAKjH,EAAWgB,GAAI2B,KAAM8B,UAAU,wCACrC,kBAACC,EAAD,CAAM1D,GAAIA,EAAI2B,KAAM3C,EAAWgB,GAAI2B,KAC/B4B,OAAQvE,EAAWgB,GAAIuD,OAAQtC,WAAYjC,EAAWgB,GAAIiB,WAC1D0C,UAAW5D,EAAaC,EAAI,EAAK0F,IAAI3E,aACrC6C,aAAc,SAACsC,GACX,IAAIC,EAAU,EAAKT,IAAIU,eAAepG,EAAIkG,EAAOvF,GAC7CwF,GACA,EAAKN,SAAS,CAAElF,YAAawF,UAKhDxF,EAAYS,WAAWR,IAAI,SAACZ,GAAD,OACxB,yBAAKiG,IAAKjH,EAAWgB,GAAI2B,KAAM8B,UAAU,wCACrC,kBAACC,EAAD,CAAM1D,GAAIA,EAAI2B,KAAM3C,EAAWgB,GAAI2B,KAC/B4B,OAAQvE,EAAWgB,GAAIuD,OAAQtC,WAAYjC,EAAWgB,GAAIiB,WAC1D0C,UAAW5D,EAAaC,EAAI,EAAK0F,IAAI3E,aACrC6C,aAAc,SAACsC,GACX,IAAIC,EAAU,EAAKT,IAAIU,eAAepG,EAAIkG,EAAOvF,GAC7CwF,GACA,EAAKN,SAAS,CAAElF,YAAawF,UAKhDxF,EAAYU,OAAOT,IAAI,SAACZ,GAAD,OACpB,yBAAKiG,IAAKjH,EAAWgB,GAAI2B,KAAM8B,UAAU,wCACrC,kBAACC,EAAD,CAAM1D,GAAIA,EAAI2B,KAAM3C,EAAWgB,GAAI2B,KAC/B4B,OAAQvE,EAAWgB,GAAIuD,OAAQtC,WAAYjC,EAAWgB,GAAIiB,WAC1D0C,UAAW5D,EAAaC,EAAI,EAAK0F,IAAI3E,aACrC6C,aAAc,SAACsC,GACX,IAAIC,EAAU,EAAKT,IAAIU,eAAepG,EAAIkG,EAAOvF,GAC7CwF,GACA,EAAKN,SAAS,CAAElF,YAAawF,oB,GAvF7CZ,IAAMc,WDe/BvF,MAtBf,WACI,OACI,kBAAC,EAAD,O,MEMYwF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,gBAAD,CAAeC,cAAc,cAAcC,gBAAgB,WAAWC,mBAAoB,KACtF,kBAAC,EAAD,QAIRC,SAASC,eAAe,SDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9bb20d56.chunk.js","sourcesContent":["import { RAW_VALUES } from \".\";\r\n\r\n/**\r\n * This contains the sorting algorithms.\r\n * \r\n * The general syntax is: `(a,b):c`.\r\n * \r\n * Where `a` is a value, `b` is the other value being compared, `c` is the result.\r\n * If `c` is 1, `a` is greater than `b`, else, if `c` is -1, `b` is greater than `a` and if `c` is 0, both values are equal.\r\n * \r\n * \r\n * All sort functions, by default, order items in ascending order.\r\n * This will cause the restaurants with highest value for sorted property become the last in the list.\r\n * \r\n * The order can be reversed by calling `Array.reverse`.\r\n * \r\n */\r\nexport const SORT = {\r\n    bestMatch: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.bestMatch - RAW_VALUES[b].sortingValues.bestMatch\r\n    },\r\n    newest: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.newest - RAW_VALUES[b].sortingValues.newest\r\n    },\r\n    ratingAverage: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.ratingAverage - RAW_VALUES[b].sortingValues.ratingAverage\r\n    },\r\n    distance: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.distance - RAW_VALUES[b].sortingValues.distance\r\n    },\r\n    popularity: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.popularity - RAW_VALUES[b].sortingValues.popularity\r\n    },\r\n    averageProductPrice: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.averageProductPrice - RAW_VALUES[b].sortingValues.averageProductPrice\r\n    },\r\n    deliveryCost: (a, b) => {\r\n        console.log(a, b, RAW_VALUES[a].sortingValues.deliveryCosts - RAW_VALUES[b].sortingValues.deliveryCosts)\r\n        return RAW_VALUES[a].sortingValues.deliveryCosts - RAW_VALUES[b].sortingValues.deliveryCosts\r\n\r\n    },\r\n    minimumCost: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.minCost - RAW_VALUES[b].sortingValues.minCost\r\n    },\r\n    topRestaurants: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.topRestaurants - RAW_VALUES[b].sortingValues.topRestaurants\r\n    }\r\n}\r\n\r\nconst regX = new RegExp('.*(cost|price).*', 'i')\r\n/**\r\n * JUSTIFICATION\r\n * ================\r\n * I believe this is a very easy way of double linking the sort methods and their display names.\r\n * There might be a better solution out there, this code is a candidate for further optimization.\r\n * \r\n * @param {int} id index of restaurant in dataset.\r\n * @param {string} sortName user friendly name of sort method used.\r\n */\r\nexport function getSortValue(id, sortName) {\r\n    let result = RAW_VALUES[id].sortingValues[REVERSE_SORT_MAPPING[sortName]]\r\n\r\n    // Format numeric counts over a mark to thousands.\r\n    // This will represent long numbers as tens of thousands instead of tens.\r\n    if (!Number.isNaN(result) && (result / 10000) > 1) {\r\n        result = `${(result / 1000).toLocaleString(undefined, { maximumFractionDigits: 2 })}k`\r\n    } else {\r\n        result = result.toLocaleString(undefined, { maximumFractionDigits: 2 })\r\n    }\r\n\r\n    // Append currency symbol to prices.\r\n    if (regX.test(sortName)) {\r\n        result = `\\u20A6${result}`\r\n    }\r\n\r\n    return result\r\n}\r\n\r\n\r\nexport const SORT_MAPPING = {\r\n    bestMatch: 'BEST MATCH',\r\n    newest: 'NEWEST',\r\n    ratingAverage: 'RATING AVG.',\r\n    distance: 'DISTANCE',\r\n    popularity: 'POPULARITY',\r\n    averageProductPrice: 'AVG. PRODUCT PRICE',\r\n    deliveryCosts: 'DELIVERY COST',\r\n    minCost: 'MINIMUM COST',\r\n    topRestaurants: 'TOP RESTAURANTS'\r\n}\r\n\r\nconst REVERSE_SORT_MAPPING = {\r\n    'BEST MATCH': 'bestMatch',\r\n    'NEWEST': 'newest',\r\n    'RATING AVG.': 'ratingAverage',\r\n    'DISTANCE': 'distance',\r\n    'POPULARITY': 'popularity',\r\n    'AVG. PRODUCT PRICE': 'averageProductPrice',\r\n    'DELIVERY COST': 'deliveryCosts',\r\n    'MINIMUM COST': 'minCost',\r\n    'TOP RESTAURANTS': 'topRestaurants'\r\n}","import { restaurants } from \"../sample.json\";\r\nimport { SORT, SORT_MAPPING } from \"./sort\";\r\n\r\nexport const DEFAULT_CONFIG = {\r\n    appName: 'iohub',\r\n    appVersion: '0.0.1',\r\n    description: 'iohub is a restaurant discovery platform to satisfy your tasty cravings!',\r\n    author: 'eikcalb'\r\n}\r\n\r\nexport var RAW_VALUES = restaurants.map(val => {\r\n    val.sortingValues.topRestaurants = ((val.sortingValues.distance * val.sortingValues.popularity) + val.sortingValues.ratingAverage)\r\n    return val\r\n}) || []\r\n\r\n/**\r\n * App is a container for app functinality.\r\n */\r\nexport class App {\r\n\r\n    currentSort = SORT_MAPPING.bestMatch\r\n\r\n    /**\r\n     * Function to update the favorite selection.\r\n     * \r\n     * @param {*} id identifier of restaurant.\r\n     * @param {boolean} value indicates if restaurant has been set to favorite or not.\r\n     */\r\n    updateFavorite(id, value,restaurants) {\r\n        // return if favorite state has not changed\r\n        if (RAW_VALUES[id].isFavorite === value) return false\r\n        RAW_VALUES[id].isFavorite = value\r\n        let { favorites, open, orderAhead, closed } = restaurants\r\n        return this.parseRestaurants([...favorites, ...open, ...orderAhead, ...closed])\r\n    }\r\n\r\n    /**\r\n     * Function called to change sort algorithm used.\r\n     * \r\n     * @param {string} sortName name of sort type\r\n     * @param {object} restaurants collection of restaurant classes\r\n     */\r\n    setSortType(sortName, restaurants) {\r\n        if (this.currentSort === sortName || Object.is(sortName, '')) return false\r\n        this.currentSort = sortName\r\n        return this.__triggerSort(restaurants, this.currentSort)\r\n        // if (this.__listener && typeof this.__listener === 'function') return this.__listener({ currentSort: this.currentSort, restaurants: this.restaurants })\r\n    }\r\n\r\n    /**\r\n     * search contains the search logic of the application.\r\n     * This works by spliting the query into tokens and concatenating the token to form a RegExp pattern.\r\n     * \r\n     * @param {string} name query token to search with.\r\n     * \r\n     * @returns {array} list of matched indices.\r\n     */\r\n    search(name = '') {\r\n        let tokens = name.toLowerCase().split('.').reduce((accum, val, index, source) => {\r\n            accum = accum + `.*${val}`\r\n            if ((index + 1) === source.length) {\r\n                accum = accum + `.*`\r\n            }\r\n            return accum;\r\n        }, '')\r\n\r\n        let regX = new RegExp(`^${tokens}$`);\r\n        return this.parseRestaurants(RAW_VALUES.reduce((accum, val, index) => {\r\n            if (!regX.test(val.name.toLowerCase())) return accum\r\n            accum.push(index)\r\n            return accum\r\n        }, []))\r\n    }\r\n\r\n    //------------------------BEGIN------------------------>\r\n    /**\r\n    * Collection of sort functions. These functions use the respective sort algorithms defined in @see SORT to arrange restaurants.\r\n    * They are set to order items based on preference.\r\n    * For instance, they sort price from lowest to highest, while they sort restaurants with higher newest score first.\r\n    */\r\n    getBestMatchSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.bestMatch).reverse()\r\n        open = open.sort(SORT.bestMatch).reverse()\r\n        orderAhead = orderAhead.sort(SORT.bestMatch).reverse()\r\n        closed = closed.sort(SORT.bestMatch).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getNewestSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.newest).reverse()\r\n        open = open.sort(SORT.newest).reverse()\r\n        orderAhead = orderAhead.sort(SORT.newest).reverse()\r\n        closed = closed.sort(SORT.newest).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getRatingAverageSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.ratingAverage).reverse()\r\n        open = open.sort(SORT.ratingAverage).reverse()\r\n        orderAhead = orderAhead.sort(SORT.ratingAverage).reverse()\r\n        closed = closed.sort(SORT.ratingAverage).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getDistanceSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.distance)\r\n        open = open.sort(SORT.distance)\r\n        orderAhead = orderAhead.sort(SORT.distance)\r\n        closed = closed.sort(SORT.distance);\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getPopularitySort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.popularity).reverse()\r\n        open = open.sort(SORT.popularity).reverse()\r\n        orderAhead = orderAhead.sort(SORT.popularity).reverse()\r\n        closed = closed.sort(SORT.popularity).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getAverageProductPriceSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.averageProductPrice)\r\n        open = open.sort(SORT.averageProductPrice)\r\n        orderAhead = orderAhead.sort(SORT.averageProductPrice)\r\n        closed = closed.sort(SORT.averageProductPrice);\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getDeliveryCostSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.deliveryCost)\r\n        open = open.sort(SORT.deliveryCost)\r\n        orderAhead = orderAhead.sort(SORT.deliveryCost)\r\n        closed = closed.sort(SORT.deliveryCost);\r\n        console.log(favorites,open)\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getMinimumCostSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.minimumCost)\r\n        open = open.sort(SORT.minimumCost)\r\n        orderAhead = orderAhead.sort(SORT.minimumCost)\r\n        closed = closed.sort(SORT.minimumCost);\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getTopRestaurantsSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.topRestaurants).reverse()\r\n        open = open.sort(SORT.topRestaurants).reverse()\r\n        orderAhead = orderAhead.sort(SORT.topRestaurants).reverse()\r\n        closed = closed.sort(SORT.topRestaurants).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    //<--------------------END------------------------|\r\n\r\n    /**\r\n     * Internal function for sorting restaurants based on the set current sort.\r\n     * \r\n     * @param {array} unsorted unsorted, parsed, list of restaurants.\r\n     * @param {string} sortName name of sorting algorithm to use.\r\n     */\r\n    __triggerSort(unsorted, sortName) {\r\n        let sorted\r\n        switch (sortName) {\r\n            case SORT_MAPPING.bestMatch:\r\n                sorted = this.getBestMatchSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.newest:\r\n                sorted = this.getNewestSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.ratingAverage:\r\n                sorted = this.getRatingAverageSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.distance:\r\n                sorted = this.getDistanceSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.popularity:\r\n                sorted = this.getPopularitySort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.averageProductPrice:\r\n                sorted = this.getAverageProductPriceSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.minCost:\r\n                sorted = this.getMinimumCostSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.deliveryCosts:\r\n                sorted = this.getDeliveryCostSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.topRestaurants:\r\n                sorted = this.getTopRestaurantsSort(unsorted)\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown value '${sortName}' provided as sort name!`)\r\n        }\r\n        return sorted\r\n    }\r\n\r\n    /**\r\n     * `parseRestaurants` parses an array of restaurant objects, inflating the correct pointer in @see App class.\r\n     * This function sets the index of restaurants to their various fields.\r\n     * This is to avoid multiple creation of object, hence only indicesare used in mapping various categories.\r\n     * \r\n     * @param {array} list List of id of restaurants\r\n     */\r\n    parseRestaurants(list) {\r\n        let restaurants = {\r\n            favorites: [],\r\n            open: [],\r\n            orderAhead: [],\r\n            closed: []\r\n        }\r\n        let props = RAW_VALUES\r\n\r\n        if (list) {\r\n            for (let i of list) {\r\n                this.__parse(restaurants, props, i)\r\n            }\r\n        } else {\r\n            for (let i = 0; i < props.length; i++) {\r\n                this.__parse(restaurants, props, i)\r\n            }\r\n        }\r\n        return this.__triggerSort(restaurants, this.currentSort)\r\n    }\r\n\r\n    /**\r\n     * Internal function for parsing source dataset into restaurant objects arranged according to their class.\r\n     * This function creates mapping of restaurant indices to restaurant classes.\r\n     */\r\n    __parse(restaurants, props, i) {\r\n        if (props[i].isFavorite) {\r\n            restaurants.favorites.push(i)\r\n        } else {\r\n            switch (props[i].status) {\r\n                case 'open':\r\n                    restaurants.open.push(i)\r\n                    break\r\n                case 'order ahead':\r\n                    restaurants.orderAhead.push(i)\r\n                    break\r\n                case 'closed':\r\n                    restaurants.closed.push(i)\r\n                    break\r\n                default:\r\n                    throw new Error('Unknown restaurant status provided!')\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { FaDoorClosed, FaDoorOpen, FaHeart, FaRegHeart, FaShoppingCart } from \"react-icons/fa\";\r\nimport '../App.css';\r\nimport { SortContext } from \"./restaurant\";\r\n\r\n\r\nlet getBadge = (status) => {\r\n    switch (status) {\r\n        case 'open':\r\n            return (\r\n                <span className=\"tags has-addons\">\r\n                    <span className=\"tag is-dark\"><FaDoorOpen /></span>\r\n                    <span className=\"tag is-success\">{status}</span>\r\n                </span>)\r\n        case 'closed':\r\n            return (\r\n                <span className=\"tags has-addons\">\r\n                    <span className=\"tag is-dark\"><FaDoorClosed /></span>\r\n                    <span className=\"tag is-warning\">{status}</span>\r\n                </span>)\r\n        case 'order ahead':\r\n            return (\r\n                <span className=\"tags has-addons\">\r\n                    <span className=\"tag is-dark\"><FaShoppingCart /></span>\r\n                    <span className=\"tag is-link\">{status}</span>\r\n                </span>)\r\n        default:\r\n            throw new Error('Unknown availability status!')\r\n    }\r\n}\r\n\r\nexport function Item({ name, status, isFavorite, sortValue, makeFavorite, id }) {\r\n\r\n    return (\r\n        <SortContext.Consumer>{state =>\r\n            <div className=\"card is-clipped has-radius\">\r\n                <div className=\"card-image \">\r\n                    <figure className=\"image is-marginless is-4by3\">\r\n                        <img src={process.env.PUBLIC_URL + `/img/rest${(id % 3) + 1}.jpg`} alt={name} />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">\r\n                        <div className=\"media-content is-flex is-flex-column\">\r\n                            <span className='has-text-weight-medium is-size-5 title'>\r\n                                {status.toLowerCase() === 'order ahead' ? 'You can order ahead of time.' : `We are ${status}!`}\r\n                            </span>\r\n                            <p className=\"subtitle is-6\">{getBadge(status)}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <p className=\"title is-4 is-capitalized has-text-weight-bold\">{name}</p>\r\n                        <p className='is-size-6 has-text-ellipse has-text-weight-light'>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\r\n                         sed do eiusmod tempor incididunt ut labore et dolore magna...</p>\r\n\r\n                    </div>\r\n                </div>\r\n                <footer className=\"card-footer\">\r\n                    <span className=\"card-footer-item is-size-2-mobile is-size-3\" onClick={() => {\r\n                        makeFavorite(!isFavorite)\r\n                    }} >\r\n                        {isFavorite ?\r\n                            <FaHeart className='isFavorite' />\r\n                            :\r\n                            <FaRegHeart className='isNotFavorite' />}\r\n                    </span>\r\n                    <span className=\"card-footer-item\">\r\n                        <div className='level'>\r\n                            <div className=\"level-item has-text-centered\">\r\n                                <div>\r\n                                    <p className=\"heading \">{state.currentSort}</p>\r\n                                    <p className=\"title\">{sortValue || 0}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </footer>\r\n            </div>\r\n        }\r\n        </SortContext.Consumer>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { FaSearch, FaSort } from \"react-icons/fa\";\r\nimport { createDebouncer } from '../App';\r\nimport { SORT_MAPPING } from '../lib/sort';\r\n\r\nexport default function Toolbar({ triggerSearch, triggerSort }) {\r\n    return (\r\n        <section className='hero is-bold is-dark has-text-centered has-search'>\r\n            <div className=\"hero-body\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"title is-uppercase\">Grab food now!</h1>\r\n                    <h2 className=\"subtitle\">\r\n                        Browse our top notch selection of delicacies.\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"hero-foot\">\r\n\r\n                <div className=\"columns\">\r\n                    <div className=\"column is-10-mobile is-offset-1-mobile is-8 is-offset-2 search\">\r\n                        <Search triggerSearch={triggerSearch} triggerSort={triggerSort} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section >\r\n    )\r\n}\r\n\r\nfunction Search({ triggerSearch, triggerSort }) {\r\n    // Debounce text search\r\n    let callback = createDebouncer((val) => {\r\n        triggerSearch(val)\r\n    }, 500)\r\n\r\n    return (\r\n        <div className='field has-addons is-centered'>\r\n            <div className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input is-rounded\" type=\"text\" onChange={ev => { callback(ev.target.value.trim()) }} placeholder=\"Search for your taste...\" />\r\n                <FaSearch className='icon is-left inputIcon' />\r\n            </div>\r\n            <div className=\"control has-icons-right \">\r\n                <select className=\"input has-text-weight-bold has-text-grey select is-rounded\" type=\"text\" onChange={ev => triggerSort(ev.target.value)} >\r\n                    <option value={SORT_MAPPING.bestMatch}>{SORT_MAPPING.bestMatch}</option>\r\n                    <option value={SORT_MAPPING.deliveryCosts}>{SORT_MAPPING.deliveryCosts}</option>\r\n                    <option value={SORT_MAPPING.distance}>{SORT_MAPPING.distance}</option>\r\n                    <option value={SORT_MAPPING.minCost}>{SORT_MAPPING.minCost}</option>\r\n                    <option value={SORT_MAPPING.newest}>{SORT_MAPPING.newest}</option>\r\n                    <option value={SORT_MAPPING.popularity}>{SORT_MAPPING.popularity}</option>\r\n                    <option value={SORT_MAPPING.ratingAverage}>{SORT_MAPPING.ratingAverage}</option>\r\n                    <option value={SORT_MAPPING.averageProductPrice}>{SORT_MAPPING.averageProductPrice}</option>\r\n                    <option value={SORT_MAPPING.topRestaurants}>{SORT_MAPPING.topRestaurants}</option>\r\n                </select>\r\n                <FaSort className='icon is-right inputIcon' />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport Restaurant from \"./components/restaurant\";\n\nfunction App() {\n    return (\n        <Restaurant />\n    );\n}\n\n\n/**\n * \n * @param {function} callback curried function to debounce.\n * @param {int} timeout debounce duration.\n */\nexport function createDebouncer(callback, timeout = 300) {\n    let timeID = undefined\n    let context = this\n\n    return function debouncer() {\n        clearTimeout(timeID)\n        timeID = setTimeout(() => callback.apply(context, arguments), timeout)\n    }\n}\n\nexport default App;","import React from 'react';\r\nimport '../App.css';\r\nimport { App } from \"../lib\";\r\nimport { RAW_VALUES } from '../lib/index';\r\nimport { getSortValue } from '../lib/sort';\r\nimport { Item } from \"./item\";\r\nimport Toolbar from \"./toolbar.jsx\";\r\n\r\n\r\nexport const SortContext = React.createContext(null);\r\n\r\nexport default class Restaurant extends React.Component {\r\n    app = new App()\r\n\r\n    state = {\r\n        restaurants: {\r\n            favorites: [],\r\n            open: [],\r\n            orderAhead: [],\r\n            closed: []\r\n        },\r\n        currentSort: this.app.currentSort\r\n    }\r\n\r\n    constructor() {\r\n        super()\r\n        this.state.restaurants = this.app.parseRestaurants()\r\n    }\r\n\r\n\r\n    setSortType(sortName) {\r\n        let newRests = this.app.setSortType(sortName, this.state.restaurants)\r\n        if (newRests) {\r\n            this.setState({ currentSort: sortName, restaurants: newRests })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { restaurants } = this.state\r\n\r\n        return (\r\n            <SortContext.Provider value={this.state}>\r\n                <main className='container is-fluid is-marginless'>\r\n                    <div className='content'>\r\n                        <div className='wrapper '>\r\n                            <Toolbar triggerSearch={query => {\r\n                                this.setState({ restaurants: this.app.search(query) })\r\n                            }}\r\n                                triggerSort={(val) => this.setSortType(val)} />\r\n                            <div className='section'>\r\n                                <div className='columns section is-vcentered is-multiline'>\r\n                                    {restaurants.favorites.map((id) => (\r\n                                        <div key={RAW_VALUES[id].name} className='column is-12-mobile is-3-tablet is-2'>\r\n                                            <Item id={id} name={RAW_VALUES[id].name}\r\n                                                status={RAW_VALUES[id].status} isFavorite={RAW_VALUES[id].isFavorite}\r\n                                                sortValue={getSortValue(id, this.app.currentSort)}\r\n                                                makeFavorite={(isFav) => {\r\n                                                    let updated = this.app.updateFavorite(id, isFav, restaurants)\r\n                                                    if (updated) {\r\n                                                        this.setState({ restaurants: updated })\r\n                                                    }\r\n                                                }} />\r\n                                        </div>\r\n                                    ))}\r\n                                    {restaurants.open.map((id) => (\r\n                                        <div key={RAW_VALUES[id].name} className='column is-12-mobile is-3-tablet is-2'>\r\n                                            <Item id={id} name={RAW_VALUES[id].name}\r\n                                                status={RAW_VALUES[id].status} isFavorite={RAW_VALUES[id].isFavorite}\r\n                                                sortValue={getSortValue(id, this.app.currentSort)}\r\n                                                makeFavorite={(isFav) => {\r\n                                                    let updated = this.app.updateFavorite(id, isFav, restaurants)\r\n                                                    if (updated) {\r\n                                                        this.setState({ restaurants: updated })\r\n                                                    }\r\n                                                }} />\r\n                                        </div>\r\n                                    ))}\r\n                                    {restaurants.orderAhead.map((id) => (\r\n                                        <div key={RAW_VALUES[id].name} className='column is-12-mobile is-3-tablet is-2'>\r\n                                            <Item id={id} name={RAW_VALUES[id].name}\r\n                                                status={RAW_VALUES[id].status} isFavorite={RAW_VALUES[id].isFavorite}\r\n                                                sortValue={getSortValue(id, this.app.currentSort)}\r\n                                                makeFavorite={(isFav) => {\r\n                                                    let updated = this.app.updateFavorite(id, isFav, restaurants)\r\n                                                    if (updated) {\r\n                                                        this.setState({ restaurants: updated })\r\n                                                    }\r\n                                                }} />\r\n                                        </div>\r\n                                    ))}\r\n                                    {restaurants.closed.map((id) => (\r\n                                        <div key={RAW_VALUES[id].name} className='column is-12-mobile is-3-tablet is-2'>\r\n                                            <Item id={id} name={RAW_VALUES[id].name}\r\n                                                status={RAW_VALUES[id].status} isFavorite={RAW_VALUES[id].isFavorite}\r\n                                                sortValue={getSortValue(id, this.app.currentSort)}\r\n                                                makeFavorite={(isFav) => {\r\n                                                    let updated = this.app.updateFavorite(id, isFav, restaurants)\r\n                                                    if (updated) {\r\n                                                        this.setState({ restaurants: updated })\r\n                                                    }\r\n                                                }} />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </SortContext.Provider >\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { ToastProvider } from 'react-toast-notifications';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router >\n        <ToastProvider PlacementType='bottom-left' TransitionState='entering' transitionDuration={250} >\n            <App />\n        </ToastProvider>\n    </Router>\n    ,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}