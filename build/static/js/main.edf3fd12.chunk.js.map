{"version":3,"sources":["lib/sort.js","lib/index.js","components/item.jsx","components/toolbar.jsx","App.js","components/restaurant.jsx","serviceWorker.js","index.js"],"names":["SORT","a","b","RAW_VALUES","sortingValues","bestMatch","newest","ratingAverage","distance","popularity","averageProductPrice","deliveryCost","minimumCost","topRestaurants","getSortValue","id","sortName","REVERSE_SORT_MAPPING","SORT_MAPPING","deliveryCosts","minCost","restaurants","map","val","App","__restaurants","favorites","open","orderAhead","closed","currentSort","__listener","this","parseRestaurants","React","useState","state","update","value","isFavorite","Object","is","triggerSort","name","tokens","toLowerCase","split","reduce","accum","index","source","length","regX","RegExp","test","push","sort","reverse","unsorted","sorted","getBestMatchSort","getNewestSort","getRatingAverageSort","getDistanceSort","getPopularitySort","getAverageProductPriceSort","getDeliveryCostSort","getMinimumCostSort","getTopRestaurantsSort","Error","list","console","info","props","i","__parse","status","getBadge","className","Item","sortValue","makeFavorite","SortContext","Consumer","app","src","process","alt","onClick","Toolbar","triggerSearch","Search","callback","timeout","timeID","undefined","context","clearTimeout","setTimeout","apply","arguments","createDebouncer","type","onChange","ev","target","trim","placeholder","createContext","Restaurant","useRestaurants","useToasts","addToast","Provider","search","bind","setSortType","key","isFav","updateFavorite","Boolean","window","location","hostname","match","ReactDOM","render","PlacementType","TransitionState","transitionDuration","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edf3fd12.chunk.js","sourcesContent":["import { RAW_VALUES } from \".\";\r\n\r\n/**\r\n * This contains the sorting algorithms.\r\n * \r\n * The general syntax is: `(a,b):c`.\r\n * \r\n * Where `a` is a value, `b` is the other value being compared, `c` is the result.\r\n * If `c` is 1, `a` is greater than `b`, else, if `c` is -1, `b` is greater than `a` and if `c` is 0, both values are equal.\r\n * \r\n * \r\n * All sort functions, by default, order items in ascending order.\r\n * This will cause the restaurants with highest value for sorted property become the last in the list.\r\n * \r\n * The order can be reversed by calling `Array.reverse`.\r\n * \r\n */\r\nexport const SORT = {\r\n    bestMatch: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.bestMatch - RAW_VALUES[b].sortingValues.bestMatch\r\n    },\r\n    newest: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.newest - RAW_VALUES[b].sortingValues.newest\r\n    },\r\n    ratingAverage: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.ratingAverage - RAW_VALUES[b].sortingValues.ratingAverage\r\n    },\r\n    distance: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.distance - RAW_VALUES[b].sortingValues.distance\r\n    },\r\n    popularity: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.popularity - RAW_VALUES[b].sortingValues.popularity\r\n    },\r\n    averageProductPrice: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.averageProductPrice - RAW_VALUES[b].sortingValues.averageProductPrice\r\n    },\r\n    deliveryCost: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.deliveryCost - RAW_VALUES[b].sortingValues.deliveryCost\r\n    },\r\n    minimumCost: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.minimumCost - RAW_VALUES[b].sortingValues.minimumCost\r\n    },\r\n    topRestaurants: (a, b) => {\r\n        return RAW_VALUES[a].sortingValues.topRestaurants - RAW_VALUES[b].sortingValues.topRestaurants\r\n    }\r\n}\r\n\r\n/**\r\n * JUSTIFICATION\r\n * ================\r\n * I believe this is a very easy way of double linking the sort methods and their display names.\r\n * There might be a better solution out there, this code is a candidate for further optimization.\r\n * \r\n * @param {int} id index of restaurant in dataset.\r\n * @param {string} sortName user friendly name of sort method used.\r\n */\r\nexport function getSortValue(id, sortName) {\r\n    return RAW_VALUES[id].sortingValues[REVERSE_SORT_MAPPING[sortName]]\r\n}\r\n\r\nexport const SORT_MAPPING = {\r\n    bestMatch: 'BEST MATCH',\r\n    newest: 'NEWEST',\r\n    ratingAverage: 'RATING AVG.',\r\n    distance: 'DISTANCE',\r\n    popularity: 'POPULARITY',\r\n    averageProductPrice: 'AVG. PRODUCT PRICE',\r\n    deliveryCosts: 'DELIVERY COST',\r\n    minCost: 'MINIMUM COST',\r\n    topRestaurants: 'TOP RESTAURANTS'\r\n}\r\n\r\nconst REVERSE_SORT_MAPPING = {\r\n    'BEST MATCH': 'bestMatch',\r\n    'NEWEST': 'newest',\r\n    'RATING AVG.': 'ratingAverage',\r\n    'DISTANCE': 'distance',\r\n    'POPULARITY': 'popularity',\r\n    'AVG. PRODUCT PRICE': 'averageProductPrice',\r\n    'DELIVERY COST': 'deliveryCosts',\r\n    'MINIMUM COST': 'minCost',\r\n    'TOP RESTAURANTS': 'topRestaurants'\r\n}","import React from \"react\";\r\nimport { restaurants } from \"../sample.json\";\r\nimport { SORT, SORT_MAPPING } from \"./sort\";\r\n\r\nexport const DEFAULT_CONFIG = {\r\n    appName: 'iohub',\r\n    appVersion: '0.0.1',\r\n    description: 'iohub is a restaurant discovery platform to satisfy your tasty cravings!',\r\n    author: 'eikcalb'\r\n}\r\n\r\nexport var RAW_VALUES = restaurants.map(val => {\r\n    val.sortingValues.topRestaurants = ((val.sortingValues.distance * val.sortingValues.popularity) + val.sortingValues.ratingAverage)\r\n    return val\r\n}) || []\r\n\r\n/**\r\n * App is a container for app functinality.\r\n */\r\nexport class App {\r\n    /**\r\n     * props contains a link to the restaurant objects.\r\n     * Each array contains a list of indices for respective objects in the dataset.\r\n     */\r\n    __restaurants = {\r\n        favorites: [],\r\n        open: [],\r\n        orderAhead: [],\r\n        closed: []\r\n    }\r\n\r\n    get restaurants() {\r\n        return this.__restaurants\r\n    }\r\n\r\n    set restaurants(val) {\r\n        this.__restaurants = val\r\n        if (this.__listener && typeof this.__listener === 'function') return this.__listener({ currentSort: this.currentSort, restaurants: val })\r\n    }\r\n\r\n    currentSort = SORT_MAPPING.bestMatch\r\n    __listener = null\r\n\r\n    constructor() {\r\n        this.parseRestaurants()\r\n    }\r\n\r\n    useRestaurants() {\r\n        let [state, update] = React.useState({ currentSort: this.currentSort, restaurants: this.restaurants })\r\n        this.__listener = update\r\n        return state\r\n    }\r\n\r\n    /**\r\n     * Function to update the favorite selection.\r\n     * \r\n     * @param {*} id identifier of restaurant.\r\n     * @param {boolean} value indicates if restaurant has been set to favorite or not.\r\n     */\r\n    updateFavorite(id, value) {\r\n        // return if favorite state has not changed\r\n        if (RAW_VALUES[id].isFavorite === value) return\r\n        RAW_VALUES[id].isFavorite = value\r\n        this.parseRestaurants()\r\n    }\r\n\r\n    setSortType(sortName) {\r\n        if (this.currentSort === sortName || Object.is(sortName, '')) return\r\n        this.currentSort = sortName\r\n        this.triggerSort(this.restaurants)\r\n        if (this.__listener && typeof this.__listener === 'function') return this.__listener({ currentSort: this.currentSort, restaurants: this.restaurants })\r\n    }\r\n\r\n    /**\r\n     * search contains the search logic of the application.\r\n     * This works by spliting the query into tokens and concatenating the token to form a RegExp pattern.\r\n     * \r\n     * @param {string} name query token to search with.\r\n     * \r\n     * @returns {array} list of matched indices.\r\n     */\r\n    search(name = '') {\r\n        if (Object.is(name, '')) return this.parseRestaurants();\r\n\r\n        let tokens = name.toLowerCase().split('.').reduce((accum, val, index, source) => {\r\n            accum = accum + `.*${val}`\r\n            if ((index + 1) === source.length) {\r\n                accum = accum + `.*`\r\n            }\r\n            return accum;\r\n        }, '')\r\n        let regX = new RegExp(`^${tokens}$`, 'g');\r\n        return this.parseRestaurants(RAW_VALUES.reduce((accum, val, index) => {\r\n            if (!regX.test(val.name.toLowerCase())) return accum\r\n            accum.push(index)\r\n            return accum\r\n        }, []))\r\n    }\r\n\r\n    getBestMatchSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.bestMatch).reverse()\r\n        open = open.sort(SORT.bestMatch).reverse()\r\n        orderAhead = orderAhead.sort(SORT.bestMatch).reverse()\r\n        closed = closed.sort(SORT.bestMatch).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getNewestSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.newest).reverse()\r\n        open = open.sort(SORT.newest).reverse()\r\n        orderAhead = orderAhead.sort(SORT.newest).reverse()\r\n        closed = closed.sort(SORT.newest).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getRatingAverageSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.ratingAverage).reverse()\r\n        open = open.sort(SORT.ratingAverage).reverse()\r\n        orderAhead = orderAhead.sort(SORT.ratingAverage).reverse()\r\n        closed = closed.sort(SORT.ratingAverage).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getDistanceSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.distance)\r\n        open = open.sort(SORT.distance)\r\n        orderAhead = orderAhead.sort(SORT.distance)\r\n        closed = closed.sort(SORT.distance);\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getPopularitySort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.popularity).reverse()\r\n        open = open.sort(SORT.popularity).reverse()\r\n        orderAhead = orderAhead.sort(SORT.popularity).reverse()\r\n        closed = closed.sort(SORT.popularity).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getAverageProductPriceSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.averageProductPrice)\r\n        open = open.sort(SORT.averageProductPrice)\r\n        orderAhead = orderAhead.sort(SORT.averageProductPrice)\r\n        closed = closed.sort(SORT.averageProductPrice);\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getDeliveryCostSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.deliveryCost)\r\n        open = open.sort(SORT.deliveryCost)\r\n        orderAhead = orderAhead.sort(SORT.deliveryCost)\r\n        closed = closed.sort(SORT.deliveryCost);\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getMinimumCostSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.minimumCost)\r\n        open = open.sort(SORT.minimumCost)\r\n        orderAhead = orderAhead.sort(SORT.minimumCost)\r\n        closed = closed.sort(SORT.minimumCost);\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    getTopRestaurantsSort({ favorites, open, orderAhead, closed }) {\r\n        favorites = favorites.sort(SORT.topRestaurants).reverse()\r\n        open = open.sort(SORT.topRestaurants).reverse()\r\n        orderAhead = orderAhead.sort(SORT.topRestaurants).reverse()\r\n        closed = closed.sort(SORT.topRestaurants).reverse()\r\n\r\n        return { favorites, open, orderAhead, closed }\r\n    }\r\n\r\n    triggerSort(unsorted) {\r\n        let sorted\r\n\r\n        switch (this.currentSort) {\r\n            case SORT_MAPPING.bestMatch:\r\n                sorted = this.getBestMatchSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.newest:\r\n                sorted = this.getNewestSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.ratingAverage:\r\n                sorted = this.getRatingAverageSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.distance:\r\n                sorted = this.getDistanceSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.popularity:\r\n                sorted = this.getPopularitySort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.averageProductPrice:\r\n                sorted = this.getAverageProductPriceSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.deliveryCosts:\r\n                sorted = this.getDeliveryCostSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.minimumCost:\r\n                sorted = this.getMinimumCostSort(unsorted)\r\n                break;\r\n            case SORT_MAPPING.topRestaurants:\r\n                sorted = this.getTopRestaurantsSort(unsorted)\r\n                break;\r\n            default:\r\n                throw new Error('Unknown value provided as sort name')\r\n        }\r\n        return sorted\r\n    }\r\n\r\n    /**\r\n     * `parseRestaurants` parses an array of restaurant objects, inflating the correct pointer in @see App class.\r\n     * This function sets the index of restaurants to their various fields.\r\n     * This is to avoid multiple creation of object, hence only indicesare used in mapping various categories.\r\n     * \r\n     * @param {array} list List of id of restaurants\r\n     */\r\n    parseRestaurants(list) {\r\n        console.info(list)\r\n        let restaurants = {\r\n            favorites: [],\r\n            open: [],\r\n            orderAhead: [],\r\n            closed: []\r\n        }\r\n        let props = RAW_VALUES\r\n\r\n        if (list) {\r\n            for (let i of list) {\r\n                this.__parse(restaurants, props, i)\r\n            }\r\n        } else {\r\n            for (let i = 0; i < props.length; i++) {\r\n                this.__parse(restaurants, props, i)\r\n            }\r\n        }\r\n        this.restaurants = this.triggerSort(restaurants)\r\n    }\r\n\r\n    __parse(restaurants, props, i) {\r\n        if (props[i].isFavorite) {\r\n            restaurants.favorites.push(i)\r\n        } else {\r\n            switch (props[i].status) {\r\n                case 'open':\r\n                    restaurants.open.push(i)\r\n                    break\r\n                case 'order ahead':\r\n                    restaurants.orderAhead.push(i)\r\n                    break\r\n                case 'closed':\r\n                    restaurants.closed.push(i)\r\n                    break\r\n                default:\r\n                    throw new Error('Unknown restaurant status provided!')\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { FaDoorClosed, FaDoorOpen, FaHeart, FaRegHeart, FaShoppingCart } from \"react-icons/fa\";\r\nimport '../App.css';\r\nimport { SortContext } from \"./restaurant\";\r\n\r\n\r\nlet getBadge = (status) => {\r\n    switch (status) {\r\n        case 'open':\r\n            return (\r\n                <span className=\"tags has-addons\">\r\n                    <span className=\"tag is-dark\"><FaDoorOpen /></span>\r\n                    <span className=\"tag is-success\">{status}</span>\r\n                </span>)\r\n            break;\r\n        case 'closed':\r\n            return (\r\n                <span className=\"tags has-addons\">\r\n                    <span className=\"tag is-dark\"><FaDoorClosed /></span>\r\n                    <span className=\"tag is-warning\">{status}</span>\r\n                </span>)\r\n        case 'order ahead':\r\n            return (\r\n                <span className=\"tags has-addons\">\r\n                    <span className=\"tag is-dark\"><FaShoppingCart /></span>\r\n                    <span className=\"tag is-link\">{status}</span>\r\n                </span>)\r\n            break;\r\n    }\r\n}\r\n\r\nexport function Item({ name, status, isFavorite, sortValue, makeFavorite, id }) {\r\n\r\n    return (\r\n        <SortContext.Consumer>{app =>\r\n            <div className=\"card is-clipped has-radius\">\r\n                <div className=\"card-image \">\r\n                    <figure className=\"image is-marginless is-4by3\">\r\n                        <img src={process.env.PUBLIC_URL + `/img/rest${(id % 3) + 1}.jpg`} alt=\"Placeholder\" />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">\r\n                        <div className=\"media-content is-flex is-flex-column\">\r\n                            <span className='has-text-weight-medium is-size-5 title'>\r\n                                {status == 'order ahead' ? 'You can order ahead of time.' : `We are ${status}!`}\r\n                            </span>\r\n                            <p className=\"subtitle is-6\">{getBadge(status)}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <p className=\"title is-4 is-capitalized has-text-weight-bold\">{name}</p>\r\n                        <p className='is-size-6 has-text-ellipse has-text-weight-light'>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\r\n                         sed do eiusmod tempor incididunt ut labore et dolore magna...</p>\r\n\r\n                    </div>\r\n                </div>\r\n                <footer className=\"card-footer\">\r\n                    <span className=\"card-footer-item is-size-2-mobile is-size-3\" onClick={() => makeFavorite(!isFavorite)} >\r\n                        {isFavorite ?\r\n                            <FaHeart className='isFavorite' />\r\n                            :\r\n                            <FaRegHeart />}\r\n                    </span>\r\n                    <span className=\"card-footer-item\">\r\n                        <div className='level'>\r\n                            <div className=\"level-item has-text-centered\">\r\n                                <div>\r\n                                    <p className=\"heading \">{app.currentSort}</p>\r\n                                    <p className=\"title\">{sortValue || 0}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </footer>\r\n            </div>\r\n        }\r\n        </SortContext.Consumer>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { FaSearch, FaSort } from \"react-icons/fa\";\r\nimport { createDebouncer } from '../App';\r\nimport { SORT_MAPPING } from '../lib/sort';\r\n\r\nexport default function Toolbar({ triggerSearch, triggerSort }) {\r\n    return (\r\n        <section className='hero is-bold is-dark has-text-centered has-search'>\r\n            <div className=\"hero-body\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"title is-uppercase\">Grab food now!</h1>\r\n                    <h2 className=\"subtitle\">\r\n                        Browse our top notch selection of delicacies.\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"hero-foot\">\r\n\r\n                <div className=\"columns\">\r\n                    <div className=\"column is-10-mobile is-offset-1-mobile is-8 is-offset-2 search\">\r\n                        <Search triggerSearch={triggerSearch} triggerSort={triggerSort} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section >\r\n    )\r\n}\r\n\r\nfunction Search({ triggerSearch, triggerSort }) {\r\n    // Debounce text search\r\n    let callback = createDebouncer((val) => {\r\n        triggerSearch(val)\r\n    }, 500)\r\n\r\n    return (\r\n        <div className='field has-addons is-centered'>\r\n            <div className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input is-rounded\" type=\"text\" onChange={ev => { callback(ev.target.value.trim()) }} placeholder=\"Search for your taste...\" />\r\n                <FaSearch className='icon is-left inputIcon' />\r\n            </div>\r\n            <div className=\"control has-icons-right \">\r\n                <select className=\"input select is-rounded\" type=\"text\" onChange={ev => triggerSort(ev.target.value)} >\r\n                    <option>SORT BY</option>\r\n                    <option value={SORT_MAPPING.bestMatch}>{SORT_MAPPING.bestMatch}</option>\r\n                    <option value={SORT_MAPPING.deliveryCosts}>{SORT_MAPPING.deliveryCosts}</option>\r\n                    <option value={SORT_MAPPING.distance}>{SORT_MAPPING.distance}</option>\r\n                    <option value={SORT_MAPPING.minCost}>{SORT_MAPPING.minCost}</option>\r\n                    <option value={SORT_MAPPING.newest}>{SORT_MAPPING.newest}</option>\r\n                    <option value={SORT_MAPPING.popularity}>{SORT_MAPPING.popularity}</option>\r\n                    <option value={SORT_MAPPING.ratingAverage}>{SORT_MAPPING.ratingAverage}</option>\r\n                    <option value={SORT_MAPPING.averageProductPrice}>{SORT_MAPPING.averageProductPrice}</option>\r\n                    <option value={SORT_MAPPING.topRestaurants}>{SORT_MAPPING.topRestaurants}</option>\r\n                </select>\r\n                <FaSort className='icon is-right inputIcon' />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { Restaurant } from \"./components/restaurant\";\n\nfunction App() {\n    return (\n        <Restaurant />\n    );\n}\n\n\n/**\n * \n * @param {function} callback curried function to debounce.\n * @param {int} timeout debounce duration.\n */\nexport function createDebouncer(callback, timeout = 300) {\n    let timeID = undefined\n    let context = this\n\n    return function debouncer() {\n        clearTimeout(timeID)\n        timeID = setTimeout(() => callback.apply(context, arguments), timeout)\n    }\n}\n\nexport default App;","import React from 'react';\r\nimport '../App.css';\r\nimport { App } from \"../lib\";\r\nimport { RAW_VALUES } from '../lib/index';\r\nimport { getSortValue } from '../lib/sort';\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { Item } from \"./item\";\r\nimport Toolbar from \"./toolbar.jsx\";\r\n\r\n\r\nlet app = new App()\r\n\r\nexport const SortContext = React.createContext(app);\r\n\r\nexport function Restaurant() {\r\n    let {restaurants} = app.useRestaurants()\r\n    let { addToast } = useToasts()\r\n    return (\r\n        <SortContext.Provider value={app}>\r\n            <main className='container is-fluid is-marginless'>\r\n                <div className='content'>\r\n                    <div className='wrapper '>\r\n                        <Toolbar triggerSearch={app.search.bind(app)} triggerSort={(val) => app.setSortType(val)} />\r\n                        <div className='section'>\r\n                            <div className='columns section is-vcentered is-multiline'>\r\n                                {restaurants.favorites.map((id) => (\r\n                                    <div className='column is-12-mobile is-3-tablet is-2'>\r\n                                        <Item id={id} key={RAW_VALUES[id].name} name={RAW_VALUES[id].name}\r\n                                            status={RAW_VALUES[id].status} isFavorite={RAW_VALUES[id].isFavorite}\r\n                                            sortValue={getSortValue(id, app.currentSort)}\r\n                                            makeFavorite={(isFav) => {\r\n                                                app.updateFavorite(id, isFav)\r\n                                            }} />\r\n                                    </div>\r\n                                ))}\r\n                                {restaurants.open.map((id) => (\r\n                                    <div className='column is-12-mobile is-3-tablet is-2'>\r\n                                        <Item id={id} key={RAW_VALUES[id].name} name={RAW_VALUES[id].name}\r\n                                            status={RAW_VALUES[id].status} isFavorite={RAW_VALUES[id].isFavorite}\r\n                                            sortValue={getSortValue(id, app.currentSort)}\r\n                                            makeFavorite={(isFav) => app.updateFavorite(id, isFav)} />\r\n                                    </div>\r\n                                ))}\r\n                                {restaurants.orderAhead.map((id) => (\r\n                                    <div className='column is-12-mobile is-3-tablet is-2'>\r\n                                        <Item id={id} key={RAW_VALUES[id].name} name={RAW_VALUES[id].name}\r\n                                            status={RAW_VALUES[id].status} isFavorite={RAW_VALUES[id].isFavorite}\r\n                                            sortValue={getSortValue(id, app.currentSort)}\r\n                                            makeFavorite={(isFav) => app.updateFavorite(id, isFav)} />\r\n                                    </div>\r\n                                ))}\r\n                                {restaurants.closed.map((id) => (\r\n                                    <div className='column is-12-mobile is-3-tablet is-2'>\r\n                                        <Item id={id} key={RAW_VALUES[id].name} name={RAW_VALUES[id].name}\r\n                                            status={RAW_VALUES[id].status} isFavorite={RAW_VALUES[id].isFavorite}\r\n                                            sortValue={getSortValue(id, app.currentSort)}\r\n                                            makeFavorite={(isFav) => app.updateFavorite(id, isFav)} />\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </SortContext.Provider >\r\n    );\r\n}\r\n\r\nexport default Restaurant;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ToastProvider } from 'react-toast-notifications'\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router >\n        <ToastProvider PlacementType='bottom-left' TransitionState='entering' transitionDuration={250} >\n            <App />\n        </ToastProvider>\n    </Router>\n    ,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}